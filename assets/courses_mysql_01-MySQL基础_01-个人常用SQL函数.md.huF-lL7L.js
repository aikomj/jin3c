import{_ as r}from"./chunks/ArticleMetadata.MTmQQbJH.js";import{_ as A,D as n,o as l,c as y,k as t,a as h,I as p,w as g,R as D,b as c,e as o}from"./chunks/framework.sNq7zgZB.js";import"./chunks/md5.OmtLykJF.js";const N=JSON.parse('{"title":"个人常用 SQL 函数","description":"","frontmatter":{"title":"个人常用 SQL 函数","author":"谨三思","date":"2025/02/16 15:43","isTop":true,"categories":["MySQL篇"],"tags":["SQL函数"]},"headers":[],"relativePath":"courses/mysql/01-MySQL基础/01-个人常用SQL函数.md","filePath":"courses/mysql/01-MySQL基础/01-个人常用SQL函数.md","lastUpdated":1743588432000}'),C={name:"courses/mysql/01-MySQL基础/01-个人常用SQL函数.md"},E={id:"个人常用-sql-函数",tabindex:"-1"},F=t("a",{class:"header-anchor",href:"#个人常用-sql-函数","aria-label":'Permalink to "个人常用 SQL 函数 <Badge text="持续更新" type="warning" />"'},"​",-1),B=D(`<h2 id="_1、时间函数" tabindex="-1">1、时间函数 <a class="header-anchor" href="#_1、时间函数" aria-label="Permalink to &quot;1、时间函数&quot;">​</a></h2><h3 id="获取当前时间-mysql" tabindex="-1">获取当前时间（MySQL） <a class="header-anchor" href="#获取当前时间-mysql" aria-label="Permalink to &quot;获取当前时间（MySQL）&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 输出格式为：yyyy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">MM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dd HH:mm:ss</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">NOW</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div><h3 id="获取当前时间秒-mysql" tabindex="-1">获取当前时间秒（MySQL） <a class="header-anchor" href="#获取当前时间秒-mysql" aria-label="Permalink to &quot;获取当前时间秒（MySQL）&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 从 1970年1月1日 开始到现在的秒数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">UNIX_TIMESTAMP();</span></span></code></pre></div><h3 id="计算两个时间之间的间隔-mysql" tabindex="-1">计算两个时间之间的间隔（MySQL） <a class="header-anchor" href="#计算两个时间之间的间隔-mysql" aria-label="Permalink to &quot;计算两个时间之间的间隔（MySQL）&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># unit 可选为FRAC_SECOND 毫秒、</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SECOND</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 秒、</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MINUTE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 分钟、</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">HOUR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 小时、</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DAY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 天、</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">WEEK</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 星期、</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">MONTH</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 月、</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">QUARTER</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 季度、</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">YEAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 年</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">TIMESTAMPDIFF(unit, datetime_expr1, datetime_expr2)</span></span></code></pre></div><h2 id="_2、字符串函数" tabindex="-1">2、字符串函数 <a class="header-anchor" href="#_2、字符串函数" aria-label="Permalink to &quot;2、字符串函数&quot;">​</a></h2><h3 id="拼接字符串-mysql" tabindex="-1">拼接字符串（MySQL） <a class="header-anchor" href="#拼接字符串-mysql" aria-label="Permalink to &quot;拼接字符串（MySQL）&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"># 将多个字符串拼接在一起</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">CONCAT</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(str1, str2, ...)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">笔者说</p><p>这个函数看起来平平无奇，但实际用起来，可不只是真香。你可能会在 MyBatis 中解决 SQL 注入的时候用到它，还可能在一些 “奇怪” 的场景用到它。</p></div><h4 id="清空数据库中的所有表数据" tabindex="-1">清空数据库中的所有表数据 <a class="header-anchor" href="#清空数据库中的所有表数据" aria-label="Permalink to &quot;清空数据库中的所有表数据&quot;">​</a></h4><p>清空单表数据很简单。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">TRUNCATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 表名;</span></span></code></pre></div><p>但是，如果现在有 100 + 张表？你当然不会一个一个的去 <code>TRUNCATE</code>，但 MySQL 又没有提供该功能。那你可以用用下面的方法。</p><ol><li><p>查询该数据库下的所有表，利用 <code>CONCAT()</code> 函数将 <code>TRUNCATE</code> 语句拼接起来</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">SELECT</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  CONCAT(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&#39;TRUNCATE TABLE &#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> TABLE_NAME,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  information_schema.TABLES</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> TABLE_SCHEMA</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;数据库名&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div></li><li><p>将执行结果复制，直接执行即可</p></li></ol><h4 id="删除数据库中的所有表" tabindex="-1">删除数据库中的所有表 <a class="header-anchor" href="#删除数据库中的所有表" aria-label="Permalink to &quot;删除数据库中的所有表&quot;">​</a></h4><p>删除单表很简单。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DROP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> 表名;</span></span></code></pre></div><p>但是，如果现在有 100 + 张表？你当然不会一个一个的去 <code>DROP</code>，但 MySQL 又没有提供该功能。那你可以用用下面的方法。</p><ol><li><p>查询该数据库下的所有表，利用 <code>CONCAT()</code> 函数将 <code>DROP</code> 语句拼接起来</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">SELECT</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  CONCAT(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">&#39;DROP TABLE IF EXISTS &#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> TABLE_NAME,</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">  information_schema.TABLES</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">WHERE</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> TABLE_SCHEMA</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;数据库名&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span></code></pre></div></li><li><p>将执行结果复制，直接执行即可</p></li></ol><h2 id="_3、窗口函数" tabindex="-1">3、窗口函数 <a class="header-anchor" href="#_3、窗口函数" aria-label="Permalink to &quot;3、窗口函数&quot;">​</a></h2><h3 id="over函数" tabindex="-1">over函数 <a class="header-anchor" href="#over函数" aria-label="Permalink to &quot;over函数&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 基本语法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">窗口函数名([参数]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">OVER</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    [PARTITION BY 列]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    [ORDER BY 列 [ASC|DESC]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    [ROWS|RANGE 窗口框架]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- PARTITION BY 将数据分为多个行，类似group by 但保留所有行，每个分区独立计算</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- ORDER BY 分区内数据的排序方式,如果省略ORDER BY，那么窗口可能包含所有行，或者取决于框架的定义</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- ROWS|RANGE 定义窗口的范围,ROWS是基于物理行,而RANGE是基于逻辑值，比如ORDER BY的列的值范围</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW，从分区的开始到当前行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- RANGE BETWEEN 1 PRECEDING AND 1 FOLLOWING, 根据当前行的值，取前后各一个值的范围</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 1、每个员工的薪水在部门的排名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> employee_id,salary,department_id,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">rank</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">over</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">partition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> by</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> department_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">order by</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> salary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">desc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dept_rank</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> employee;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 2、分组计算每行的序号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> ROW_NUMBER</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">over</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">partition</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> by</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> department_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">order by</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> create_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">asc</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 省略partition by,那么整个结果集作为一个分区</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 3、计算每个月的累计销售额</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- rows between unbounded preceding and current row 分区的开始到当前行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> month</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,sales,</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(salse) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">over</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">order by</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> month</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> rows</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> between</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> unbounded</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> preceding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> current </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">row</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> cumulative_salse</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sales_data</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 4、计算每个销售额占总销售额的比例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 这里SUM(sales) OVER () 会计算所有行的总和，因为没有PARTITION BY和ORDER BY，所以整个表作为一个分区，总和就是总销售额。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">product,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">sales,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">sales </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> SUM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(sales) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">OVER</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sales_percentage</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sales;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 5、查询每个部门内薪水的排名，以及每个员工的薪水与部门平均薪水的差异</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">department_id,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">employee_id,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">salary,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">RANK</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">OVER</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">PARTITION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> BY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> department_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> salary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">DESC</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dept_rank,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">AVG</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(salary) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">OVER</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">PARTITION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> BY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> department_id) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dept_avg_salary,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">salary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> AVG</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(salary) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">OVER</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">PARTITION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> BY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> department_id) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> salary_diff</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> employees;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 6、计算每个月的销售额以及过去三个月的平均销售额（移动平均）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">SELECT</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">month</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">sales,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">AVG</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(sales) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">OVER</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ORDER BY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> month</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> ROWS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> BETWEEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> PRECEDING</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> AND</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> CURRENT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ROW</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> moving_avg</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> sales_data</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ORDER BY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> month</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- ROWS BETWEEN 2 PRECEDING AND CURRENT ROW 前两行到当前行，</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 6、LEAD和LAG函数也属于窗口函数，它们可以访问当前行之前或之后的行</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 每个员工的上一个入职日期，按入职日期排序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">employee_id,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">hire_date,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">LAG</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(hire_date) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">OVER</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> hire_date) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> previous_hire_date  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 当前行的上一个入职日期</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> employees;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">-- 7、order by 之后默认框架就是从开始行到当前行</span></span></code></pre></div>`,24);function m(s,u,_,R,b,T){const k=n("Badge"),e=r,d=n("ClientOnly");return l(),y("div",null,[t("h1",E,[h("个人常用 SQL 函数 "),p(k,{text:"持续更新",type:"warning"}),h(),F]),p(d,null,{default:g(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(l(),c(e,{key:0,article:s.$frontmatter},null,8,["article"])):o("",!0)]}),_:1}),B])}const q=A(C,[["render",m]]);export{N as __pageData,q as default};
